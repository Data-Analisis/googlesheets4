% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_sheet.R
\name{spread_sheet}
\alias{spread_sheet}
\title{Spread a data frame of cells into spreadsheet shape}
\usage{
spread_sheet(df, col_names = TRUE, col_types = NULL, na = "",
  trim_ws = TRUE, guess_max = min(1000, max(df$row)))
}
\arguments{
\item{df}{A data frame with one row per (nonempty) cell, integer variables
\code{row} and \code{column} (probably referring to location within the spreadsheet),
and a list-column \code{cell} of \code{SHEET_CELL} objects.}

\item{col_names}{\code{TRUE} to use the first row as column names, \code{FALSE} to get
default names, or a character vector to provide column names directly. In
all cases, names are processed through \code{\link[tibble:tidy_names]{tibble::tidy_names()}}. If user
provides \code{col_types}, \code{col_names} can have one entry per column, i.e. have
the same length as \code{col_types}, or one entry per unskipped column.}

\item{col_types}{column types Either \code{NULL} to guess all from the spreadsheet
or (TEMPORARY INTERFACE!!!) a string using readr shortcodes, with one
character or code per column. If exactly one \code{col_type} is specified, it is
recycled. See Details for more.}

\item{na}{Character vector of strings to interpret as missing values. By
default, blank cells are treated as missing data.}

\item{trim_ws}{Should leading and trailing whitespace be trimmed?}

\item{guess_max}{Maximum number of data rows to use for guessing column
types.}
}
\value{
A tibble in the shape of the original spreadsheet, but enforcing
user's wishes regarding column names, column types, \code{NA} strings, and
whitespace trimming.
}
\description{
Reshapes a data frame of cells (probably the output of \code{\link[=sheets_cells]{sheets_cells()}}) into
another data frame, i.e., puts it back into the shape of the source
spreadsheet. At the moment, this function exists primarily for testing
reasons. The flagship function \code{\link[=read_sheet]{read_sheet()}} is what most users are looking
for. It is basically \code{\link[=sheet_cells]{sheet_cells()}} + \code{\link[=spread_sheet]{spread_sheet()}}.
}
\examples{
df <- sheets_cells(sheets_example("mini-gap"))
spread_sheet(df)
}
